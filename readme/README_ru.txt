==============================================================================
 BeQt - Beyond Qt
==============================================================================

Домашняя страница: https://github.com/the-dark-angel/BeQt

Автор: Андрей Богданов (ololoepepe@gmail.com)

Лицензия: GNU LGPL (см. COPYING.txt)

BeQt представляет из себя набор библиотек, разрабатываемых как расширение Qt.
Отсюда происходит название проекта (англ. "над-Qt"). BeQt может быть полезен
в небольших и средних приложениях с классическим интерфейсом.
BeQt берёт на себя большинство рутинной работы, позволяя сконцентрироваться
непосредственно на решении задачи.

Вы нужны BeQt! Каждый желающий может внести свой вклад в этот открытый проект.
Если у вас есть желание поучаствовать в проекте, или имеются предложения,
или вам требуется помощь в работе с BeQt, - вы можете связаться со мной
при помощи электронной почты или через Jabber (ololoepepe@gmail.com).

==============================================================================
 Краткий обзор
==============================================================================

Модули BeQt помогают быстрее реализовать работу с ресурсами приложения,
поддержку плагинов и перевод интерфейса на лету.

В BeQt имеются средства для удобной обработки пользовательских команд в
консольных приложениях и даже собственный эмулятор терминала, а также
несколько часто используемых вспомогательных виджетов.

Кроме того, в BeQt реализована готовая к использованию модель сетевого
клиент-серверного взаимодействия, основанная на классах Qt.

Отдельный модуль посвящен реализации простого, но в то же время мощного
текстового редактора с возможностью выделения текста прямоугольными блоками.

Важно: BeQt не использует QtQuick.

==============================================================================
 Зависимости
==============================================================================

Чтобы собрать и использовать BeQt, вам потребуются те же библиотеки и
инструменты, что и для любого другого проекта, использующего Qt.

Подробнее см.: http://qt-project.org/resources/getting_started

BeQt рассчитан на использование совместно с Qt 5, либо с Qt 4.8. Интерфейс
классов может несколько отличаться в зависимости от используемой версии Qt.
В случае использования Qt 4.8 некоторые возможности могут отсутствовать.
Поддержка версий Qt ниже 4.8.0 не гарантируется.

Примечание: для использования всех возможностей BeQt потребуются следующие
модули Qt: QtCore, QtConcurrent, QtNetwork, QtGui, QtSql, QtWidgets (для Qt5).

Для использования встроенных иконок формата .svgz также потребуется
соответствующий плагин.

Подробнее см.: http://qt-project.org/doc/qt-5.0/plugins-howto.html

==============================================================================
 Сборка и установка (кратко)
==============================================================================

Чтобы собрать BeQt, просто перейдите в каталог с исходным кодом и выполните
следующие команды:

 * "qmake"

 * "make"
   или аналогичную команду ("nmake", "mingw32-make", и т.д.)

 * "make install"
   На UNIX-подобных системах могут потребоваться права суперпользователя

Примечание: При сборке из командной строки необходимо правильно настроить
окружение (путь к библиотекам Qt и т.д.).

Также можно воспользоваться Qt Creator. После сборки проекта нужно перейти в
папку, где производилась сборка, и выполнить команду "make install", либо
настроить запуск этой команды по заваршении сборки в Qt Creator.

Подробнее см.: http://qt-project.org/doc/qtcreator-2.6

==============================================================================
 Сборка и установка (подробно)
==============================================================================

При сборке BeQt можно передать некоторые параметры qmake:

 * "HUNSPELL_PREFIX=<path>"
   Задать распооложение внешней библиотеки Hunspell. По умолчанию используется
   внутренняя библиотека

 * "CONFIG+=no_network"
   Не собирать модуль BeQtNetwork

 * "CONFIG+=no_qsl"
   Не собирать модуль BeQtSql

 * "CONFIG+=no_widgets"
   Не собирать модуль BeQtWidgets (модуль BeQtCodeEditor также не будет
   собран, поскольку зависит от модуля BeQtWidgets)

 * "CONFIG+=no_codeeditor"
   Не собирать модуль BeQtCodeEditor

 * "CONFIG+=no_networkwidgets"
   Не собирать модуль BeQtNetworkWidgets

 * "CONFIG+=builtin_resources"
   Встроить ресурсы (включая переводы) в файлы библиотек
   Подробнее см.: http://qt-project.org/doc/qt-5.0/resources.html

 * "CONFIG+=examples"
   Собрать демонстрационные примеры (по умолчанию примеры не собираются)

 * "CONFIG+=no_install"
   Не устанавливать никаких файлов (только сборка)

 * "CONFIG+=no_headers"
   Не устанавливать заголовочные файлы

 * "CONFIG+=private_headers"
   Устанавливать "закрытые" заголовочные файлы вместе с "открытыми"

 * "BEQT_PREFIX=<path>"
   Задать путь для установки. См. примечание ниже

 * "BEQT_HEADERS_INSTALLS_PATH=<path>"
   Задать путь для установки заголовочных файлов. См. примечание ниже

 * "BEQT_LIBS_INSTALLS_PATH=<path>"
   Задать путь для установки файлов библиотек. См. примечание ниже

 * "BEQT_RESOURCES_INSTALLS_PATH=<path>"
   Задать путь для установки файлов ресурсов. См. примечание ниже

 * "BEQT_SUBDIR_NAME=<name>"
    Задать имя подпапки BeQt в случае если BeQt используется как подмодуль

Причечание: По умолчанию на системах семейства Windows BeQt устанавливается
в папку "C:\Program files\BeQt" (или другую аналогичную папку, в зависимости
от конкретной системы). Заголовочные файлы, файлы библиотек и ресурсы
устанавливаются в соответствующие подпапки (include, lib, и т.д.).

На UNIX-подобных системах структура папок при установке по умолчанию имеет
следующий вид:

 * "/usr/include/beqt"
   Путь к заголовочным файлам

 * "/usr/lib"
   Путь к библиотекам

 * "/usr/share/beqt"
   Путь к файлам ресурсов

Можно задать другой путь для установки BeQt. Для этого нужно при запуске qmake
передать соответсвующий параметр (см. выше).

Предупреждение: Не используйте пути, содержащие пробелы. На системах семейства
Windows заменяйте имена папок, содержащие пробелы, на сокращённые имена.

Подробнее см.: http://support.microsoft.com/kb/142982

==============================================================================
 Использование
==============================================================================

BeQt может использоваться и как системная библиотека, и как подмодуль проекта.

Важно: BeQt можно подключить к проекту, добавив всего лишь две строчки
в файл .pro, однако при этом необходимо использовать qmake.

Для начала добавьте в файл .pro следующее:

 "BEQT = [core] [network] [sql] [widgets] [codeeditor] [networkwidgets] [all]"

В квадратных скобках указаны необязательные параметры, соответствующие
модулям BeQt. Также можно добавить сразу все модули (параметр "[all]").
Зависимости модулей друг от друга и от модулей Qt разрешаются автоматически.

В случае, если BeQt используется как системная библиотека (либо собрана и
находится в отдельной папке), нужно добавить в ваш файл .pro
после "BEQT = ..." следующую строку:

 "include(<path_to_beqt>/depend.pri)"

"<path_to_beqt>" - путь к ресурсам BeQt (на UNIX-подобных системах это обычно
"/usr/share/beqt", на системах семейства Windows - "C:\Program files\BeQt").

В случае, если BeQt используется как подмодуль, придется несколько усложнить
структуру проекта, создав общий файл .pro, в который будут включены как
подмодули BeQt, так и ваш проект.

Подробнее см.:
http://qt-project.org/doc/qt-5.0/qmake-project-files.html#project-templates

Если вы собрали BeQt с использованием внешней библиотеки Hunspell, то вы
должны указать путь к Hunspell снова во время линковки BeQt:

 "HUNSPELL_PREFIX=<path>"

Пример общего файла .pro:

 "...
 CONFIG+=ordered
 TEMPLATE=subdirs
 SUBDIRS=beqt yourproject
 ..."

Важно: Обратите внимание, что подмодуль BeQt должен быть включен перед
остальными подмодулями, использующими его, а в переменную "CONFIG" должен быть
добавлен параметр "ordered". Это гарантирует, что BeQt будет собран до того,
как потребуется его использование другими подмодулями.

Примечание: В силу особенностей qmake, после сборки проекта может
потребоваться повторное выполнение команд "qmake" и "make"
(это необходимо для правильной линковки библиотек).
Повторное выполнение этих команд займёт не более нескольких секунд.

При сборке BeQt автоматически генерируются файлы переводов (.qm), содержащие
переводы элементов пользовательского интерфейса. Эти файлы находятся в папке
"translations" (например, "translations/beqt_ru.qm").

Если вы хотите использовать BeQt с разными версиями Qt, возможно, вам будет
полезна следующая ссылка:
http://qt-project.org/doc/qt-5.0/qtcore/qtglobal.html#QT_VERSION_CHECK

==============================================================================
 ЧАВО
==============================================================================

В: Как начать использовать BeQt?
О: См. "Сборка и установка", "Использование", примеры в папке "examples".

В: Почему модуль BeQtWidgets назван именно так? В Qt 4.8 нет модуля Widgets!
О: В Qt 5 все виджеты вынесены в отдельный модуль (QtWidgets).

В: Каковы лицензионные ограничения BeQt?
О: Практически никаких. Вы можете использовать BeQt как угодно, однако,
не забывайте о том, что данное положение не распространяется на библиотеки Qt.
Подробнее см.: COPYING.txt, http://qt-project.org/products/licensing

В: У меня возникли сложности с использованием BeQt, куда я могу обратиться?
О: Электронная почта/Jabber: ololoepepe@gmail.com

В: Я нашел баг/У меня есть идея, куда можно написать об этом?
О: См. ответ выше.

В: Почему отсутствует документация?
О: К сожалению, я просто физически не успеваю писать документацию. Вы можете
помочь проекту, приняв в нём участие (см. ответ выше).

В: Будет ли проект поддерживаться/развиваться?
О: Текущая версия (2.x.y), скорее всего, будет поддерживаться. Дальнейшее
развивтие проекта зависит от того, найдутся ли желающие помочь мне с этим.
К сожалению, мне не хватает времени и квалификации дальше развивать
проект таких размеров в одиночку.

В: Есть ли смысл использовать BeQt в сочетании с QtQuick (QML)?
О: Модули BeQtCore и BeQtNetwork могут быть полезны в том числе и при создании
интерфейсов с помощью QtQuick.

==============================================================================
 Распространение
==============================================================================

При распространении приложения, использующего BeQt, не забудьте добавить файлы
ресурсов (библиотеки, картинки, переводы и т.д. - см. выше).

Рекомеднуется использовать статическую сборку, т.к. это помогает избежать
проблем с зависимостями. В случае статической сборки используйте параметр
"builtin_resources".

Подробнее см.:
http://qt-project.org/doc/qt-5.0/deployment.html#static-vs-shared-libraries
